syntax = "proto3";

package monai.deploy.platform;

option csharp_namespace = "Monai.Deploy.Platform.Grpc";
option go_package = "monaid.grpc";
option java_package = "com.monai.deploy.platform.grpc";

import public "common.proto";

// Service for managing MONAI Application Packages (MAP).
service Map {
  // Requests the creation of a new MAP registation.
  // Attempting to create a MAP with an already known container URN will result in an error.
  rpc Create(MapCreateRequest) returns (MapCreateResponse);

  // Requests the deletion of a known MAP registation.
  // Identifying the MAP registration to delete by reference name will also delete the reference name.
  // Attempting to delete a MAP registration with reference names will result in an error.
  // Attempting to delete an unknown or already deleted MAP registation will result in an error.
  rpc Delete(MapDeleteRequest) returns (MapDeleteResponse);

  // Requests a filtered list of know MAP records.
  // When no filter is provided, the default filter will be used.
  rpc List(MapListRequest) returns (stream MapListResponse);

  // Requests the deletion of a MAP reference name.
  rpc ReferenceDelete(MapReferenceDeleteRequest) returns (MapReferenceDeleteResponse);

  // Requests for a reference name to refer to known MAP.
  // Attempting to reference a deleted or error-state MAP will result in an error.
  rpc ReferenceUpdate(MapReferenceUpdateRequest) returns (MapReferenceUpdateResponse);

  // Requests for a deleted MAP registration to restored (undeleted).
  // Restoring a MAP registration does restore any deleted reference names.
  // Attempting to restore a MAP registration which is not deleted with result in an error.
  // Attempting to restore an unknown MAP registration will result in an error.
  rpc Restore(MapRestorRequest) returns (MapRestoreResponse);

  // Requests the status of a known map.
  rpc Status(MapStatusRequest) returns (stream MapStatusResponse);
}

enum MapState {
  // The MAP is unknown or the state of the MAP is unknown.
  // New jobs cannot be created using this MAP registration.
  MAP_STATE_UNKNOWN = 0;

  // Creation of the MAP registration has been requested, but has not yet started.
  // New jobs cannot be created using this MAP registration.
  MAP_STATE_PENDING = 1;

  // The server is in-progress of importing the MAP for usage.
  // New jobs cannot be created using this MAP registration.
  MAP_STATE_IMPORTING = 2;

  // The MAP is ready for use.
  // New jobs can be created using this MAP registration.
  MAP_STATE_READY = 3;

  // MAP import failed because the MAP is not a valid MONAI application package.
  // New jobs cannot be created using this MAP registration.
  MAP_STATE_INVALID = 4;

  // MAP import failed because the its container image is unreachable.
  // New jobs cannot be created using this MAP registration.
  MAP_STATE_MISSING = 5;
}

// Request for Map::Create rpc.
message MapCreateRequest {
  // Standard request header.
  RequestHeader header = 1;

  // Universal resource name of the container image of the MAP.
  // This is used to fetch the MAP and make it available to be associated with jobs.
  string containerUrn = 2;

  // Reference name to assign to the MAP registration.
  // Duplicate reference names are not allowed, and will cause MAP creation to fail.
  // Reference Names can be updated to refer to a different MAP in the future.
  // Reference Names are compared using case insentitive comparator functions.
  // The maximum allowed size for a reference name is 128 bytes.
  string map_name = 3;

  // When true, an existing reference name can be updated; otherwise an error will be returned.
  bool take_reference_name = 4;
}

// Response from Map::Create rpc.
message MapCreateResponse {
  // Standard response header.
  ResponseHeader header = 1;

  // Unique identifier of the MAP registration.
  Identifier map_id = 2;

  // Reference name assigned to the MAP registration at creation.
  // No value will be provided if a reference name was not provided in the creation request.
  // Reference Names are compared using case insentitive comparator functions.
  // The maximum allowed size for a reference name is 128 bytes.
  string map_name = 3;

  // Current state of the MAP
  MapState state = 4;
}

// Request for Map::Delete rpc.
message MapDeleteRequest {
  // Standard request header.
  RequestHeader header = 1;

  // Identifier of the MAP registration registration to delete.
  oneof identifer {
    // Unique identifier of the MAP registration to delete.
    Identifier map_id = 2;

    // Reference name which refers to the MAP registration to delete.
    // When identifying a MAP by reference name, for deletion, the reference name used will also be deleted.
    // Reference name are compared using case insentitive comparator functions.
    // The maximum allowed size for a reference name is 128 bytes.
    string map_name = 3;
  }

  // When true all reference names which refer to MAP registration to be deleted, will also be deleted; otherwise a MAP registration with reference names cannot be deleted.
  bool force = 4;
}

// Response from Map::Delete rpc.
message MapDeleteResponse {
  // Standard response header.
  ResponseHeader header = 1;

  // Unique identifier of the deleted MAP.
  Identifier map_id = 2;
}

// Request for Map::List rpc.
message MapListRequest {
  message Filter {
    // When provided, only MAP records created after the supplied timestamp will be returned.
    Timestamp created_after = 1;

    // When provided, only MAP records created before the supplied timestamp will be returned.
    Timestamp created_before = 2;

    // When true, unnamed MAP records will be included in the set returned; otherwise unnamed MAP records are not returned.
    bool include_unnamed = 4;

    // When true, deleted MAP records will be included in the set returned; otherwise deleted MAP records are not returned.
    bool include_deleted = 5;

    // When provided, only MAP records matching these state(s) will not be returned.
    repeated MapState excluded_states = 6;

    // When provided, only MAP records matching these state(s) will be returned.
    repeated MapState included_states = 7;

    // When provided, only MAP records created by the supplied user will be returned.
    Identifier user_id = 8;

    // When true, supported input and output details returned for each MAP; otherwise input and output details are not returned.
    bool include_io_specs = 9;
  }

  // Standard request header.
  RequestHeader header = 1;

  // List filter.
  Filter filter = 2;
}

// Response from Map::List rpc.
message MapListResponse {
  message MapInfo {
    // Unique identifier of the MAP registration.
    Identifier map_id = 1;

    // Reference name(s) which refer to the MAP registration.
    // Reference name are compared using case insentitive comparator functions.
    // The maximum allowed size for a reference name is 128 bytes.
    repeated string map_names = 2;

    // Current state of the MAP registration.
    MapState state = 3;

    // Timestamp when the MAP registration was created.
    Timestamp created = 4;

    // True if the MAP registration has been deleted; otherwise false.
    bool is_deleted = 5;

    // UTF-8 encoded JSON data specifying the output type, layout, and format of the MAP.
    // Only provided when include_io_specs is true.
    // Data schema is unspecified.
    // The maximum size returned is 4096 bytes.
    string output_format = 6;

    // UTF-8 encoded JSON data specifying the type, layout, format, and protocols of supported inputs for the MAP.
    // Only provided when include_io_specs is true.
    // Data schema is unspecified.
    // The maximum size returned is 4096 bytes per format.
    repeated string input_formats = 7;
  }

  // Standard response header.
  ResponseHeader header = 1;

  // List of MAP registation returned by the server.
  repeated MapInfo maps = 2;
}

// Request for Map::ReferenceDelete rpc.
message MapReferenceDeleteRequest {
  // Standard RPC request header.
  RequestHeader header = 1;

  // Reference name to delete.
  // Reference name are compared using case insentitive comparator functions.
  // The maximum allowed size for a reference name is 128 bytes.
  string map_name = 2;
}

// Response from Map::ReferenceDelete rpc.
message MapReferenceDeleteResponse {
  // Standard RPC response header.
  ResponseHeader header = 1;

  // Reference name which was just deleted.
  string map_name = 2;
}

// Request for Map::ReferenceUpdate rpc.
message MapReferenceUpdateRequest {
  // Standard RPC request header.
  RequestHeader header = 1;

  // Unique identifier of the MAP registation to refer to.
  Identifier map_id = 2;

  // Reference name to be updated.
  // If the reference name does not already exist, it will be created.
  // Reference name are compared using case insentitive comparator functions.
  // The maximum allowed size for a reference name is 128 bytes.
  string map_name = 3;

  // When true, an existing reference name can be updated; otherwise an error will be returned.
  bool take_reference_name = 4;
}

// Response from Map::UpdateResponse rpc.
message MapReferenceUpdateResponse {
  // Standard RPC response header.
  ResponseHeader header = 1;

  // Unique identifier of the MAP registation the reference name refers to.
  Identifier map_id = 2;

  // Updated reference name.
  // Reference name are compared using case insentitive comparator functions.
  // The maximum allowed size for a reference name is 128 bytes.
  string map_name = 3;
}

// Request for Map::Restore rpc.
message MapRestorRequest {
  // Standard RPC request header.
  RequestHeader header = 1;

  // Unique identifier of the MAP registration to restore.
  Identifier map_id = 2;
}

// Response from Map::Restore rpc.
message MapRestoreResponse {
  // Standard RPC response header.
  ResponseHeader header = 1;

  // Unique identifier of the updated MAP registation.
  Identifier map_id = 2;
}

// Request for Map::Status rpc.
message MapStatusRequest {
  // Standard RPC request header.
  RequestHeader header = 1;

  // Identifier of the MAP to query.
  oneof identifier {
    // Unique identifier of the MAP registation to query.
    Identifier map_id = 2;

    // Reference name of the MAP registation to query.
    string map_name = 3;
  }

  // When true, the manifests of the MAP are returned; otherwise the manifests are not returned.
  bool include_manifests = 4;

  // When true, the history of the MAP is returned; otherwise history is not returned.
  bool include_history = 5;
}

// Response for Map::Status rpc.
message MapStatusResponse {
  message Manifest {
    // The name of the manifest.
    // Maximum size of 256 bytes.
    string name = 1;

    // UTF-8 encoded manifest content.
    // The maximum allowed size is 4194304 bytes (4 MiB).
    string content = 2;
  }

  // Standard RPC response header.
  ResponseHeader header = 1;

  // Unique identifier of the MAP.
  Identifier map_id = 2;

  // Reference name(s) which refer to the MAP registration.
  // Only provided when the MAP registation has referring reference names.
  // Reference name are compared using case insentitive comparator functions.
  // The maximum allowed size for a reference name is 128 bytes.
  repeated string map_names = 3;

  // Current state of the MAP registation.
  MapState state = 4;

  // Unique identifier of the user that created the MAP registation.
  string user_id = 5;

  // Timestamp of when the MAP registation was created.
  Timestamp created = 6;

  // True when the MAP registation is deleted; otherwise false.
  string is_deleted = 7;

  // Timestamp of when the MAP registation was deleted.
  // No value will be provided if the MAP registation has not been deleted.
  Timestamp deleted = 8;

  // UTF-8 encoded JSON format application manifest of the MAP.
  // Only provided when include_manifests is true.
  repeated Manifest manifests = 16;

  // History of the MAP registation.
  // Only provided when include_history is true.
  repeated HistoricalEvent history = 24;
}
