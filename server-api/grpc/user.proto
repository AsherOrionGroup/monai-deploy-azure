syntax = "proto3";

package monai.deploy.platform;

option csharp_namespace = "Monai.Deploy.Platform.Grpc";
option go_package = "monaid.grpc";
option java_package = "com.monai.deploy.platform.grpc";

import public "common.proto";

// Service for managing user accounts.
service User {
  // Requests a filtered list of known users.
  // When no filter is provided, the default filter will be used.
  rpc List(UserListRequest) returns (stream UserListResponse);

/** Feature Not Available in Current Version
 * // Requests a user accounts privileges to be updated.
 * rpc Privileges(UserPrivilegesRequest) returns (UserPrivilegesResponse);
 *
 * // Requests the status of a known user.
 * rpc Status(UserStatusRequest) returns (stream UserStatusResponse);
**/
}

// Request for User::List rpc.
message UserListRequest {
  // Standard RPC request header.
  RequestHeader header = 1;
}

// Response from User::List rpc.
message UserListResponse {
  message UserInfo {
    // Unique identifier of the user.
    Identifier user_id = 2;

    // Display name of the user.
    // Maximum size for a user display name is 1024 bytes.
    string display_name = 4;
  }

  // Standard RPC response header.
  ResponseHeader header = 1;

  // List of users.
  repeated UserInfo users = 2;
}

/** Feature Not Available in Current Version
 * // Request for User::Status rpc.
 * message UserStatusRequest {
 *   // Standard RPC request header.
 *   RequestHeader header = 1;
 *
 *   // When true, the history of the user is returned; otherwise history is not returned.
 *   bool include_history = 4;
 * }
 *
 * // Response from User::Status rpc.
 * message UserStatusResponse {
 *   // Standard RPC response header.
 *   ResponseHeader header = 1;
 *
 *   // Unique identifier of the user.
 *   Identifier user_id = 2;
 *
 *   // Authority identifier of the user.
 *   // Maximum size for a user authority identifier is 2048 bytes (2 KiB).
 *   string authority_id = 3;
 *
 *   // Name of the user.
 *   // Maximum size for a user name is 1024 bytes (1 KiB).
 *   string username = 4;
 *
 *   // Timestamp the user account was created.
 *   Timestamp created = 5;
 *
 *   // Timestamp the user last interacted with the system.
 *   // No value will be provided if the user has never interacted with the system.
 *   Timestamp last_access = 6;
 *
 *   // True if the user has the ability to set user account privileges; otherwise false.
 *   bool is_administrator = 8;
 *
 *   // True if the user can read jobs they did not create; otherwise false.
 *   bool can_read_jobs = 9;
 *
 *   // True if the user can create jobs; otherwise false.
 *   bool can_create_jobs = 10;
 *
 *   // True if the user can delete jobs; otherwise false.
 *   bool can_delete_jobs = 11;
 *
 *   // True if the user can create (aka register) new MONAI application packages; otherwise false.
 *   bool can_create_maps = 13;
 *
 *   // True if the user can delete (aka disable) know MONAI application packages; otherwise false.
 *   bool can_delete_maps = 14;
 *
 *   // True if the user can list and download from payloads they did not create; otherwise false.
 *   bool can_read_payloads = 15;
 *
 *   // True if the user can create payloads; othersise false.
 *   bool can_create_payloads = 16;
 *
 *   // True if the user can delete payloads they did not create; otherwise false.
 *   bool can_delete_payloads = 17;
 *
 *   // History of the user account.
 *   // This is only the history of the account, and does not include any user action history.
 *   // Only provided when include_history = true.
 *   repeated HistoricalEvent history = 24;
 * }
**/
